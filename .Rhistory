df
df[1:]
df[1,]
df[,1]
df[,2]
sum(df[,2])
df[,2]*df[,1]
sum(df[,2]*df[,1])
1/sum(df[,2]*df[,1])
1/2.79
fst_m = sum(df[,2]*df[,1])/sum(df[,2])
round(fst_m,3)
1/2.792
p = 0.358
sqrt((p^2 -p +1)/(p^2*(1-p)))
(p^2 -p +1)/(p^2*(1-p))
sum(df[,2])
1/(130*9.36)
sqrt(1/(130*9.36))
0.358 +1.96*0.029
0.358 -1.96*0.029
?geom
?dgeom
df$estimation = round(dgeom(df[,1], 0.358),3)
df
dgeom(df[,1], 0.358),3
.358*130
df[,1]
df[,1]
df
name = c("Number of Hops", "Frequency")
count = c(1, 2, 3, 4, 5,6,7,8,9,10,11,12)
freq = c(48, 31, 20, 9, 6,5,4,2,1,1,2,1)
df = data.frame(count, freq)
colnames(df) = name
df
df[,1]
df
geom = function (x,p){
p * (1-p)^(x-1)
}
df$estimation = geom(df[,1],0.358)
df
geom = function (x,p){
p * (1-p)^(x-1)
}
df$estimation = 130*geom(df[,1],0.358)
df
hist(df[,2], main = "Fitting Geometric Distribution with p =0.358")
lines(df$estimation, col = "red")
df$estimation = round(130*geom(df[,1],0.358),3)
df
hist(df[,2], main = "Fitting Geometric Distribution with p =0.358", break =20)
lines(df$estimation, col = "red")
df
hist(df[,2], main = "Fitting Geometric Distribution with p =0.358", breaks =20)
lines(df$estimation, col = "red")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(dplyr)
geom = function (x,p){
p * (1-p)^(x-1)
}
df$estimation = round(130*geom(df[,1],0.358),3)
df
geom_hist(df[,2], main = "Fitting Geometric Distribution with p =0.358", breaks =20)
geom_lines(df$estimation, col = "red")
?geom_line
install.packages("ggplot2")
library(ggplot2)
geom = function (x,p){
p * (1-p)^(x-1)
}
df$estimation = round(130*geom(df[,1],0.358),3)
df
geom_hist(df[,2], main = "Fitting Geometric Distribution with p =0.358", breaks =20)
geom_lines(df$estimation, col = "red")
?geom_histogram
df
hist(df[,2], main = "Fitting Geometric Distribution with p =0.358", breaks =40)
lines(df[,3], col = "red")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(knitr)
install.packages('knitr')
install.packages("knitr")
library(knitr)
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("knitr")
install.packages("knitr")
library(knitr)
X = c("x1", "x2", "x3", "x4")
H0 = c(0.2, 0.3, 0.3, 0.2)
H1 = c( 0.1, 0.4, 0.1, 0.4)
df3 = cbind(X, H0, H1)
df3
X = c("x1", "x2", "x3", "x4")
H0 = c(0.2, 0.3, 0.3, 0.2)
H1 = c( 0.1, 0.4, 0.1, 0.4)
df3 = cbind(X, H0, H1)
df3
df[,1]
df3[,1]
df[,3]*df[,2]
df3[,3]*df3[,2]
df3[,3]
df3["H0/H1"] = df3[,2]/df3[,3]
H0 = c(0.2, 0.3, 0.3, 0.2)
H1 = c( 0.1, 0.4, 0.1, 0.4)
df3 = cbind(H0, H1)
df3
df3["H0/H1"] = df3[,1]/df3[,2]
df3
df3$"H0/H1" = df3[,1]/df3[,2]
H0 = c(0.2, 0.3, 0.3, 0.2)
H1 = c( 0.1, 0.4, 0.1, 0.4)
df3 = cbind(H0, H1)
df3
df3$Ratio = df3[,1]/df3[,2]
df3
df[,1]/df[,2]
df3[,1]/df3[,2]
H0 = c(0.2, 0.3, 0.3, 0.2)
H1 = c( 0.1, 0.4, 0.1, 0.4)
df3 = cbind(H0, H1)
df3[,1]/df3[,2]
ratio = df[,1]/df[,2]
df3$Likelihood_Ratio = ratio
ratio = df3[,1]/df3[,2]
df3$Likelihood_Ratio = ratio
H0 = c(0.2, 0.3, 0.3, 0.2)
H1 = c( 0.1, 0.4, 0.1, 0.4)
df3 = cbind(H0, H1)
df3
ratio = df3[,1]/df3[,2]
df3$Likelihood_Ratio = ratio
df3
H0 = c(0.2, 0.3, 0.3, 0.2)
H1 = c( 0.1, 0.4, 0.1, 0.4)
df3 = data.frame(H0, H1)
df3
ratio = df3[,1]/df3[,2]
df3$Likelihood_Ratio = ratio
df3
X = c("x1", "x2", "x3", "x4")
H0 = c(0.2, 0.3, 0.3, 0.2)
H1 = c( 0.1, 0.4, 0.1, 0.4)
df3 = data.frame(X,H0, H1)
df3
ratio = df3[,2]/df3[,3]
df3$Likelihood_Ratio = ratio
df3
?point
?seq
pnorm(2)
pnorm(-2)
2*pnorm(2)-1
2 - 2*pnorm(2)
p1 =seq(0.1,0.49, 0.01)
p2 = seq(0.51, 1)
p = c(p1,p2)
y = 1 - (pnorm(60,100*p, sqrt(100*p(1-p))) - pnorm(40, 100*p, 100*p(1-p)))
p1 =seq(0.1,0.49, 0.01)
p2 = seq(0.51, 1,0.01)
p = c(p1,p2)
p1 =seq(0,0.49, 0.01)
p2 = seq(0.51, 1,0.01)
p = c(p1,p2)
y = 1 - (pnorm(60,100*p, sqrt(100*p(1-p))) - pnorm(40, 100*p, 100*p(1-p)))
y = 1 - (pnorm(60,mean = 100*p, sd = sqrt(100*p(1-p))) - pnorm(40, mean=100*p, sd=100*p(1-p)))
p1 =seq(0,0.49, 0.01)
p2 = seq(0.51, 1,0.01)
p = c(p1,p2)
y = 1 - pnorm((60 -100*p)/sqrt(100*p*(1-p))) + pnorm((40-100*p)/sqrt(100*p*(1-p)))
p1 =seq(0,0.49, 0.01)
p2 = seq(0.51, 1,0.01)
p = c(p1,p2)
y = 1 - pnorm((60 -100*p)/sqrt(100*p*(1-p))) + pnorm((40-100*p)/sqrt(100*p*(1-p)))
plot(p3, y, 'l')
p1 =seq(0,0.49, 0.01)
p2 = seq(0.51, 1,0.01)
p = c(p1,p2)
y = 1 - pnorm((60 -100*p)/sqrt(100*p*(1-p))) + pnorm((40-100*p)/sqrt(100*p*(1-p)))
plot(p, y, 'l')
p1 =seq(0,0.49, 0.01)
p2 = seq(0.51, 1,0.01)
p = c(p1,p2)
y = 1 - pnorm((60 -100*p)/sqrt(100*p*(1-p))) + pnorm((40-100*p)/sqrt(100*p*(1-p)))
plot(p, y, 'l', main = "Power of the test under X ~ N(100p, 100p(1-p)")
1/0.75
1.28*2
2.56 -1.5
1.06/2
qnorm(0.53)
1-0.08
1- qnorm((2.56-1.6)/2)
2.56-1.5
(2.56-1.5)/2
1- 0.7019
(4.66-1.5)/2
qnorm(1.58)
dnorm(1.58)
install.packages("knitr")
library(knitr)
install.packages("knitr")
library("knitr")
View(BibleNames)
x = c(5, 9, 19, 33)
y = (0.42, 0.23, 0.16, 0.19)
y = c(0.42, 0.23, 0.16, 0.19)
sum(x)
66*y
z = 66*y
(x-z)^2/z
sum((x-z)^2/z)
Flying_fighters = c(51, 38)
Flying_transport = c(14, 16)
Not_flying = c(38, 46)
df5 = data.frame(Flying_fighters, Flying_transport, Not_flying)
row.names(df5) = c("Female Offspring", "Male Offspring")
prob = chi_hom_prob(df5,1,3)
df5a = Expected_count(df5,1,3,prob)
df5a
result5 = round(chi_home_test(df5a,3,1),2)
pearson_test = function (vec1, vec2){
sum((vec1-vec2)^2/vec2)}
chi_hom_prob = function (X,begin,end){
grand_total = sum(X[,begin:end])
sum_row = rowSums(X[begin:end])
prob = round(sum_row/grand_total,2)
return (prob)
}
#iterate to find the expected count
Expected_count = function(X, begin, end, prob){
for (i in begin:end){
Newcolname = paste0("Expected_", names(X)[i])
expected = c()
sum_col = sum(X[,i])
expected = prob * sum_col
X[[Newcolname]] = expected
}
return (X)
}
chi_home_test = function (X, iter, begin){
var = 0
for (i in 1:iter){
temp = pearson_test(X[begin], X[begin+iter])
var = var + temp
begin = begin +1
}
return (var)
}
df5
df5a
prob = chi_hom_prob(df5,1,3)
df5a = Expected_count(df5,1,3,prob)
df5a
result5 = round(chi_home_test(df5a,3,1),2)
df5
?spread
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
?spread
??spread
?gather
install.packages("CRAN")
install.packages("tidyr")
library("tidyr")
?spread
df5
female_offspring = c(51,14, 38)
male_offspring = c(38,16,46)
df5b = data.frame(female_offspring, male_offspring)
row.names(df5b) = c("Flying Flighters", "Flying Transport", "Not flying")
df5b
prob = c(100/(105.37+100),105.37/(105.37+100) )
df5b$expected_female = df[,1]*prob[1]
df5b$expected_female = df[,2]*prob[2]
df[,2]*prob[2]
df5b$expected_female = df5b[,1]*prob[1]
df5b$expected_female = df5b[,2]*prob[2]
df5b
Flying_fighters = c(51, 38)
Flying_transport = c(14, 16)
Not_flying = c(38, 46)
df5 = data.frame(Flying_fighters, Flying_transport, Not_flying)
row.names(df5) = c("Female Offspring", "Male Offspring")
prob = chi_hom_prob(df5,1,3)
df5a = Expected_count(df5,1,3,prob)
df5a
result5 = round(chi_home_test(df5a,3,1),2)
female_offspring = c(51,14, 38)
male_offspring = c(38,16,46)
df5b = data.frame(female_offspring, male_offspring)
row.names(df5b) = c("Flying Flighters", "Flying Transport", "Not flying")
prob = c(100/(105.37+100),105.37/(105.37+100) )
df5b$expected_female = df5b[,1]*prob[1]
df5b$expected_male = df5b[,2]*prob[2]
df5b
df5b[i,]
df5b[1,]
?lapply
lapply(df[,1:2], df[,3:4], pearson_test(x,y))
lapply(df5b[,1:2], df5b[,3:4], pearson_test(x,y))
mapply(pearson_test,df5b[,1:2], df5b[,3:4])
df5b[,1:2]
pearson_test(c(51,38), c(24.833228,19.496811))
vapply(pearson_test, vec1 = df5b[,1:2], vec2 = df5b[,3:4])
vapply(FUN =pearson_test, vec1 = df5b[,1:2], vec2 = df5b[,3:4])
vapply(FUN =pearson_test, FUN.VALUE  = df5b[,1:2], FUN.VALUE = df5b[,3:4])
vapply(df5b[,1:2], pearson_test, df5b[,3:4])
mapply(pearson_test,df5b[,1:2],df5b[,3:4] )
pearson_test(c(38,46), c(18.503189,23.601402))
for (i in 1:nrow(df5b)){
chi_square_stat[i] = pearson_test(df5b[i,1:2], df5b[i,3:4])
}
chi_square_stat = c()
for (i in 1:nrow(df5b)){
chi_square_stat[i] = pearson_test(df5b[i,1:2], df5b[i,3:4])
}
chi_square_stat
df5b$chi_square_stat = round(chi_square_stat,2)
df5b
prob
Flying_fighters = c(51, 38)
Flying_transport = c(14, 16)
Not_flying = c(38, 46)
df5 = data.frame(Flying_fighters, Flying_transport, Not_flying)
female_offspring = c(51,14, 38)
male_offspring = c(38,16,46)
df5b = data.frame(female_offspring, male_offspring)
row.names(df5b) = c("Flying Flighters", "Flying Transport", "Not flying")
prob = c(100/(105.37+100),105.37/(105.37+100) )
df5b$expected_female = (df5b[,1]+df[,2])*prob[1]
df5b$expected_male = (df5b[,1]+df[,2])*prob[2]
female_offspring = c(51,14, 38)
male_offspring = c(38,16,46)
df5b = data.frame(female_offspring, male_offspring)
row.names(df5b) = c("Flying Flighters", "Flying Transport", "Not flying")
prob = c(100/(105.37+100),105.37/(105.37+100) )
df5b$expected_female = (df5b[,1]+df5b[,2])*prob[1]
df5b$expected_male = (df5b[,1]+df5b[,2])*prob[2]
df5b
(51+38) *prob[1]
female_offspring = c(51,14, 38)
male_offspring = c(38,16,46)
df5b = data.frame(female_offspring, male_offspring)
row.names(df5b) = c("Flying Flighters", "Flying Transport", "Not flying")
prob = c(100/(105.37+100),105.37/(105.37+100) )
df5b$expected_female = (df5b[,1]+df5b[,2])*prob[1]
df5b$expected_male = (df5b[,1]+df5b[,2])*prob[2]
chi_square_stat = c()
for (i in 1:nrow(df5b)){
chi_square_stat[i] = pearson_test(df5b[i,1:2], df5b[i,3:4])
}
df5b$chi_square_stat = round(chi_square_stat,2)
df5b
female_offspring = c(51,14, 38)
male_offspring = c(38,16,46)
df5b = data.frame(female_offspring, male_offspring)
row.names(df5b) = c("Flying Flighters", "Flying Transport", "Not flying")
df5a
pilot = c(sum(df5a[1,]), sum(df5a[2,]))
pilot = c(sum(df5a[1,]), sum(df5a[2,]))
US_man = c(100, 105.37)
df5b = data.frame(pilot, US_man)
row.names(df5b) = c("female offspring", "male offspring")
df5b
pilot = c(sum(df5[1,]), sum(df5[2,]))
US_man = c(100, 105.37)
df5b = data.frame(pilot, US_man)
row.names(df5b) = c("female offspring", "male offspring")
df5b
prob = chi_hom_prob(df5b, 1,2)
prob
sum(df5b[,1], df5b[,2])
203/408.37
pearson_test = function (vec1, vec2){
sum((vec1-vec2)^2/vec2)}
chi_hom_prob = function (X,begin,end){
grand_total = sum(X[,begin:end])
sum_row = rowSums(X[begin:end])
prob = sum_row/grand_total
return (prob)
}
pilot = c(sum(df5[1,]), sum(df5[2,]))
US_man = c(100, 105.37)
df5b = data.frame(pilot, US_man)
row.names(df5b) = c("female offspring", "male offspring")
prob = chi_hom_prob(df5b, 1,2)
df5b = Expected_count(df5b, 1,2, prob)
df5b
result5b = chi_home_test(df5b,1,2)
result5b
pearson_test(df5b[1], df5b[3]) + pearson_test(df5b[2], df5b[4])
chi_home_test(df5b,1,2)
chi_home_test(df5b,2,1)
result6a
Red = c(sum(df6[1,]),sum(colSums(df6))/2)
Blue = c(sum(df6[2,]),sum(colSums(df6))/2)
df6a = data.frame(Red, Blue)
row.names(df6a) = c("Observed", "Expected")
df6a
result6a = round(pearson_test(df6a[1], df6a[2]),2)
boxing = c(148, 120)
F_Wrestling = c(27, 24)
GR_Wrestling = c(25, 23)
TKW = c(45, 35)
df6 = data.frame(boxing, F_Wrestling, GR_Wrestling, TKW)
row.names(df6) = c("Red", "Blue")
df6
Red = c(sum(df6[1,]),sum(colSums(df6))/2)
Blue = c(sum(df6[2,]),sum(colSums(df6))/2)
df6a = data.frame(Red, Blue)
row.names(df6a) = c("Observed", "Expected")
df6a
result6a = round(pearson_test(df6a[1], df6a[2]),2)
result6a
prob = c(0.5,0.5)
df6b = Expected_count(df6, 1,4, prob)
df6b
result6b = round(chi_home_test(df6b, 4, 1),2)
result6b
prob = chi_hom_prob(df6, 1,2)
df6d = Expected_count(df6, 1,4, prob)
df6d
result6d = round(chi_home_test(df6d, 4, 1),2)
result6d
prob
df5b
df5
Flying_fighters = c(51, 38)
Flying_transport = c(14, 16)
Not_flying = c(38, 46)
df5 = data.frame(Flying_fighters, Flying_transport, Not_flying)
row.names(df5) = c("Female Offspring", "Male Offspring")
df5
prob = c(100/(105.37+100), 105.37/(100+105.37))
df5b = Expected_count(df5b, 1,2, prob)
df5b
prob = c(100/(105.37+100), 105.37/(100+105.37))
df5b = Expected_count(df5, 1,2, prob)
df5b
result5b = chi_home_test(df5b,2,1)
result5b = chi_home_test(df5b,3,1)
ncol(df5b)
prob = c(100/(105.37+100), 105.37/(100+105.37))
df5b = Expected_count(df5, 1,3, prob)
df5b
result5b = chi_home_test(df5b,3,1)
result5b
df
df = read.csv("suicides82-96.csv")
getwd()
df = read.csv("suicides82-96.csv")
df
fm_pearson_test = pearson_test(df[2], df[4])
#fm_lik_ratio_test = 2* sum(df[,3]* log(df[,3]/df[,5]))
m_pearson_test = pearson_test(df[3], df[5])
getwd()
setwd("kaggle_fa16/projects/project3")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("Matrix", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(data.table)
install.packages("Metrics")
ID = 'id'
TARGET = 'loss'
SEED = 0
train = read.csv("train.csv")
test = read.csv("test.csv")
y_train = log(train[,TARGET, with=FALSE])
y_train = log(train[,TARGET, with = FALSE])[[TARGET]]
y_train = log(train[,TARGET])[[TARGET]]
y_train = log(train[,TARGET])
[[TARGET]]
train[, c(ID, TARGET) : = NULL]
train = fread("train.csv", showProgress = TRUE)
drop = c(ID, TARGET)
train = train[,!(names(train) %in% drop)]
ntrain = nrow(train)
train_test = rbind(train,test)
drop_test = c(ID)
train = train[,!(names(train) %in% drop)]
test = test[,!(names(test) %in% drop)]
ntrain = nrow(train)
train_test = rbind(train,test)
str(train_test)
?dtype
features = names(train)
for (f in features) {
if (class(train_test[[f]]) == "character"){
levels = unique(train_test[[f]])
train_test[[f]] = as.integer(factor(train_test[[f]], levels = levels))
}
}
View(train_test)
train = read.csv("train.csv")
test = read.csv("test.csv")
y_train = log(train[,TARGET])
drop_train = c(ID, TARGET)
drop_test = c(ID)
train = train[,!(names(train) %in% drop)]
test = test[,!(names(test) %in% drop)]
ntrain = nrow(train)
train_test = rbind(train,test)
features = names(train)
View(train_test)
for (f in features) {
if (class(train_test[[f]]) == "character"){
levels = unique(train_test[[f]])
train_test[[f]] = as.integer(factor(train_test[[f]], levels = levels))
}
}
x_train = train_test[1:ntrain,]
x_test = train_test[(ntrain+1):nrow(train_test),]
